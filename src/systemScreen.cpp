// #include "base/graphics.hpp"
// #include "base/n64controller.hpp"
// #include <WiFi.h>
// #include <Preferences.h>
// #include <HTTPClient.h>
// #include <ArduinoOTA.h>
// #include <esp_ota_ops.h>
// #include <ArduinoJson.h>
// #include "lz4.h"

// const char* ssid = "THOR-5G";
// const char* password = "Marita30";
// const char* firmwareURL = "http://192.168.0.133:7777/download/1";

// #define CONFIG_SPI_FLASH_DANGEROUS_WRITE

// const int sizeTable[] = {
//     165,169,169,169,169,171,171,10821,18876,18805,20161,20897,20534,21807,21593,22270,22210,22420,22516,22614,22509,22466,22551,22350,22407,22666,22695,22601,22436,22651,22596,22501,22584,22602,22521,22432,22496,22509,22414,22448,22548,22534,22569,22456,22523,22654,22521,22539,22607,22691,22638,22748,22712,22466,22529,22442,22338,22337,22408,22520,22428,22391,22290,22242,22252,22178,22180,22208,22409,22505,22645,22584,22523,22572,22235,22383,22443,22299,22373,22188,22293,22284,22480,22412,22360,22491,22538,22664,22157,22206,22289,22080,22365,22316,22528,22633,22557,22682,22793,22736,22769,22782,23654,23457,23575,23451,23405,23480,23247,23260,22754,22543,22542,22414,22439,22380,22309,22146,22353,22113,22419,22395,22474,22573,22380,22485,22512,22334,22160,23203,23351,23536,23587,23602,23329,23350,23423,22743,22269,22942,23031,23081,23031,22980,22885,23018,22939,22961,22923,22810,22704,22968,23019,22986,23119,22984,23029,23114,23083,23044,23111,22972,23016,23109,22964,22951,23147,23093,23288,23110,23187,23208,23268,23139,23184,23299,23257,23231,23189,23233,23379,23177,23099,23007,23155,23015,23133,23186,23121,23013,23022,22995,23064,23065,23016,23151,23040,23116,23868,22814,22618,22670,22658,22886,22914,22908,22982,23002,22899,22995,22973,23080,22979,22902,22705,22886,22785,22712,22848,22790,22732,22864,22984,22862,22941,22872,22916,22952,22874,22920,22902,22833,23412,24048,24003,23787,23670,23605,23373,23398,23503,23559,23492,23546,23530,23489,23413,23343,23454,23438,23362,23201,23313,23424,23345,23493,23497,23322,23423,23210,23225,23122,23144,23318,23422,23973,22686,22667,22517,22656,22438,22377,22518,22635,22692,22749,22699,22654,22642,22720,22777,22903,22935,22788,22812,22699,22627,22877,22807,22555,22508,22746,22657,22694,22603,22755,22589,22619,22530,22574,22606,20994,21327,21606,21556,21408,21523,21358,21609,21750,21408,21365,21531,21490,21379,21474,21240,21114,21131,21170,21161,21383,21339,21455,21460,21347,21168,21297,21397,21450,21323,21379,21185,21338,21893,22548,22574,22619,22639,22835,22875,22748,22702,22811,22856,22726,22735,22737,22688,22834,22833,22753,22784,22636,22804,22690,22617,22684,22809,23155,21415,20966,20561,20288,20420,20810,20811,20948,21087,20740,20937,21695,21726,21173,20762,20999,20638,20496,20052,20041,20134,20708,21427,22178,22279,22441,22503,22902,22859,23022,22682,23085,22520,22846,23059,23186,23274,23281,23425,23329,23354,23351,23483,22692,22405,22652,22715,22788,22671,22591,22558,22768,22674,22614,22647,22695,22703,22708,22705,22690,22720,22567,22712,22645,22680,22549,22537,22613,22674,22800,22843,22737,22600,22601,22640,22635,22709,22576,22565,22838,22923,22951,23037,22880,22994,23050,23013,22922,22989,23039,22968,22987,22928,23070,23000,23102,23101,23261,23294,23225,23274,23364,23234,23079,23142,23038,23269,23130,23117,23184,23174,22880,22921,23210,23066,22768,22796,22647,22976,22770,22916,22862,22872,22624,22639,22861,22792,22951,22788,22867,22838,22867,22703,22747,22735,22995,22797,22858,22743,22844,22733,22638,22608,22658,22614,22695,22356,22497,22569,22628,22600,22810,22693,22677,22716,22647,22795,22770,22826,22928,22910,22884,22789,22363,22549,22583,22704,22457,22657,22745,22797,22772,22757,22713,22682,22421,22544,22662,22809,22665,22077,22618,22867,22932,22861,23052,23073,23171,23080,23180,23152,23193,23144,23084,22999,22899,22953,22954,23370,23242,23061,23007,22946,22955,22814,22873,22751,22566,22570,22248,21983,22158,22246,22130,21210,21200,21427,21442,21400,21356,21205,21302,21367,21294,21410,21408,21275,21591,21445,21501,21490,21739,21749,21620,21460,21718,21692,21674,21631,21807,21655,21668,21811,21673,21659,21722,21736,21734,21689,21735,21672,21778,21843,21546,21667,21695,21738,21546,21664,21734,21785,21522,21506,21648,21584,21328,21322,21300,21303,21505,21596,21604,21640,21607,21542,21696,21704,21591,21437,21538,21572,21747,21600,21690,21771,21732,21624,21485,21599,21740,21352,21441,21355,21498,21575,21613,21711,21647,21649,21731,21639,21789,21734,21827,21710,21679,21719,21527,21648,21704,21707,21644,21621,21792,21569,21276,21201,21324,21482,21449,21555,21736,21756,21952,23200,23476,23613,23872,23804,23877,23778,23745,23867,23873,23833,23860,23807,23734,23890,24739,25448,21967,21664,21473,21128,20978,20794,19956,19694,19996,20662,20739,20868,20811,20294,20183,20300,20801,24057,24105,23998,24129,24548,24415,24267,24267,24287,24032,24055,24148,24566,24634,24227,24227,24258,24388,24406,24393,24267,24359,24403,24634,24533,24419,23810,24220,24462,24470,24463,24367,24428,24344,24147,24328,24368,24288,24375,24382,24351,24367,24377,24681,24474,24583,24530,24422,24509,24529,24466,24291,24167,24345,24270,24089,24245,23995,23999,24029,23042,22681,22822,23053,22981,23003,22918,23032,22923,22756,22816,22695,22947,22898,22841,22897,22829,24327,24712,24860,24680,24677,24794,24178,23902,24194,23989,24302,24397,24346,24415,24127,23990,24152,24290,23522,23495,23489,23401,23392,23354,23476,23273,23363,23315,23375,23339,23324,23358,23439,23456,23408,23281,23444,23305,23209,23225,23193,23229,23342,23263,24142,24288,24202,24289,24302,24327,24284,24107,24243,24534,24279,24439,24308,24428,24186,24369,24127,24047,23801,23317,23187,23091,22973,22995,23031,23044,23273,23106,22981,23003,22982,23013,22933,22898,22914,22918,23113,23025,23211,23099,23371,23434,23116,23196,23143,23149,23599,22841,22824,22811,22897,23075,23256,23420,23358,23710,23816,24049,24188,24261,24414,24404,24486,24592,24528,24574,24459,24350,24606,24471,24434,24607,22760,22384,22099,21769,20449,19874,20027,20332,20529,20289,20513,20778,20925,20827,20988,21016,20904,20599,20683,20870,21069,21237,20691,20794,21124,20856,21087,20985,21704,21937,21681,21663,21939,22365,22285,22335,22254,22338,22406,22530,22216,22255,22394,22447,22000,21789,21370,21138,20974,20819,20972,20991,21356,21363,21826,21789,21880,22287,22324,22478,22338,22410,22455,22631,22636,22470,22631,23286,20652,20458,20922,20821,20822,20776,20700,20958,20455,20503,20549,20781,20714,20544,20885,20877,20885,20732,20784,20860,21760,23305,23551,23528,23494,23459,23571,23691,23525,23579,23644,23521,23706,23657,23716,23633,23574,23703,23740,23741,23558,23533,23637,23515,23397,23412,23373,23524,23117,22524,22616,22648,22584,22414,21902,21529,21807,21566,21548,21242,21606,21716,21786,21986,21746,21428,20936,20643,20627,20610,20639,20933,21022,21032,20793,20607,20777,20798,20908,20910,21133,21547,21604,21793,21684,21624,21490,21503,21771,21745,21865,21434,22370,22925,22966,23002,22897,22944,23009,22913,22932,22976,22981,22974,23019,22899,23002,22999,22925,23710,22689,21975,21936,21697,21868,21863,21837,21941,21947,21832,21865,22002,22015,22005,21947,21847,21960,21909,22005,21991,22012,22053,21954,22098,22006,22124,21982,21928,21935,22052,22017,22112,22140,22141,21853,21759,21722,21748,22032,21708,21600,21505,21563,21353,21692,21433,21563,21662,21736,21863,21853,21862,21682,21682,21682,21709,21786,21737,21811,21842,21885,21867,21818,21796,21790,21783,21809,21820,23252,23654,23886,23876,23990,23957,23898,23813,23941,23961,23908,23930,23999,23934,23971,23921,23838,23796,21211,21264,21494,21747,21745,21717,21899,21944,21799,21769,21789,22035,22034,21926,21855,21729,21749,21859,22196,22113,22231,22388,22428,22250,22563,22414,22461,22522,22636,22504,22522,22550,22613,22700,21518,21282,21222,21215,21329,21509,21562,21646,21628,21586,21815,21640,21760,21532,21421,21397,21325,21605,21344,21429,21629,21739,22180,22068,22106,21804,21839,21876,21683,21472,21735,21831,21731,22100,22023,22139,22016,22496,22382,22452,22574,22670,22640,22798,22720,22920,22924,22834,22902,22808,22743,23922,22126,21641,21581,21602,21582,21634,21460,21493,21474,21487,21775,21721,21812,22010,22164,22187,22284,22188,22301,22268,22293,22015,21556,21378,21665,21575,21505,21767,21805,21708,21736,21622,21950,24160,24562,24462,24656,24664,24681,24595,24781,24755,24741,24754,24684,24784,24836,24965,24816,24934,25141,26353,23117,22683,22705,22773,22899,22869,22861,22780,22952,22850,22836,22730,22753,22622,22621,22472,21980,22010,22472,22732,22516,22373,22548,22738,22578,21102,19479,19453,19995,20443,20984,21435,21840,21910,22044,22164,22385,22486,22485,22384,21953,22017,21794,21769,21647,21587,21555,21653,21408,21475,21922,23376,23188,23139,23163,23040,23046,22966,22935,22891,22821,22832,23011,23036,23055,22875,22827,22810,22736,22858,23150,22994,22838,22788,22577,22718,22769,22510,22615,22708,22650,22703,22683,23028,23102,23656,20646,19993,20165,20611,20513,20607,20657,20502,21573,21537,21035,21660,20968,20077,20128,20103,20481,22067,22761,22922,22820,22918,22892,22827,23005,23044,22916,22909,23083,22937,23027,22888,23027,23058,23568,23157,23354,23389,23493,23549,23514,23638,23551,23525,23588,23535,23622,23505,23550,23534,23453,22126,21865,21805,21974,22008,22059,22256,22533,22509,22691,22760,22891,23064,22839,22965,23006,23309,23452,23175,22739,22954,22957,22943,23025,23025,23036,22907,23071,23076,23169,23112,23047,23017,23058,22783,24185,24520,24838,24776,24718,24815,24810,24875,25135,25153,25003,25116,25232,25325,25067,24857,24841,24992,21918,21455,21486,21654,21748,21636,21679,21798,21610,21836,21824,21868,21906,21831,21959,21778,21842,21842,21847,22296,22536,22679,22851,22722,22746,22519,22594,22570,22657,22703,22641,22447,21576,21355,20727,20714,20975,21009,21057,21221,21144,21693,21792,21776,21678,21576,21540,21381,21625,21410,21282,20882,21579,22635,22
// };

// static uint8_t * payloadBuffer;
// const int frameSize = 25000; // Size of each frame
// const int numFrames = 3; // Number of frames to buffer
// int frameIndex = 0; // Current frame index to display
// int ind = 0; // Overall index for reading data
// uint64_t timer = esp_timer_get_time();
// QueueHandle_t frameQueue;
// TaskHandle_t decompressTaskHandle;
// int actualFrame = 0;
// char fps[10];
// bool unlockQueue = false;

// uint64_t frametime = esp_timer_get_time();
// const int requiredFrames = 2; // Set the number of frames to wait for

// void frameDecompressor(void *pvParameters) {
//     uint8_t *frameData[requiredFrames]; // Array to hold pointers to the frames
//     int frameCount = 0;

//     while (true) {
//         // Wait until we have enough frames loaded
//         while (frameCount < requiredFrames) {
//             // Receive frame data from the queue
//             uint8_t *data;
//             if (xQueueReceive(frameQueue, &data, portMAX_DELAY) == pdTRUE) {
//                 frameData[frameCount++] = data; // Store the received frame
//             }
//         }

//         // Now we have enough frames, decompress them
//         for (int i = 0; i < requiredFrames; i++) {
//             int rc = LZ4_decompress_safe(
//                 (const char*)frameData[i], 
//                 (char*)GFX::getFramebufferPtr(), 
//                 sizeTable[i], // Assuming sizeTable[i] corresponds to each frame
//                 160 * 240 * sizeof(uint8_t)
//             );

//             if (rc < 0) {
//                 Serial.print("Decompression failed for frame: ");
//                 Serial.println(rc);
//             }

//             // Optionally: Free the frame data if dynamically allocated
//             free(frameData[i]);
//         }

//         // Reset frame count for the next batch
//         frameCount = 0;
//     }
// }

// Preferences preferences;
// void initSystemScreen(){
//     GFX::clearFrameBuffer();
//     GFX::writeText("CONNECTING TO WIFI...", 0, 0);
//     GFX::updateScreen();

//     WiFi.begin(ssid, password);
//     // Wait for the connection to establish
//     while (WiFi.status() != WL_CONNECTED) {
//         delay(1000);
//         Serial.println("Connecting to WiFi...");
//     }

//     GFX::clearFrameBuffer();
//     GFX::writeText("CONNECTED TO WIFI!", 0, 0);
//     GFX::updateScreen();
//     delay(1000);

//     GFX::clearFrameBuffer();

//     preferences.begin("ota_str");
//     bool ota_downloaded = preferences.getBool("ota_downloaded", false);

//     // if(!ota_downloaded){
//     //     GFX::writeText("DOWNLOADING TO OTA...", 0, 0);
//     //     GFX::updateScreen();
//     //     HTTPClient http;
//     //     http.begin(firmwareURL);
//     //     int httpCode = http.GET();

//     //     if (httpCode == HTTP_CODE_OK) {
//     //         int len = http.getSize();
//     //         WiFiClient *client = http.getStreamPtr();

//     //         if (len > 0) {
//     //             Update.begin(len);
//     //             size_t written = Update.writeStream(*client);
//     //             if (written == len) {
//     //                 GFX::writeText("DOWNLOAD COMPLETED", 0, 8);
//     //                 GFX::updateScreen();
//     //                 preferences.putBool("ota_downloaded", true);
//     //                 Serial.println("Update complete");
//     //             } else {
//     //                 Serial.printf("Update failed, written only: %d out of %d\n", written, len);
//     //             }
//     //             Update.end();
//     //         }
//     //     } else {
//     //         Serial.printf("HTTP GET failed, code: %d\n", httpCode);
//     //     }
//     //     http.end();

//     //     const esp_partition_t* factory_partition = esp_partition_find_first(ESP_PARTITION_TYPE_APP, ESP_PARTITION_SUBTYPE_APP_FACTORY, NULL);
//     //     if (factory_partition) {
//     //         esp_ota_set_boot_partition(factory_partition);
//     //     }

//     //     // esp_partition_

//     //     delay(1000);
//     //     ESP.restart();
//     // }
//     // else{
//     //     GFX::writeText("ALREADY HAS OTA", 0, 0);
//     // }

//     HTTPClient http;
//     http.begin("http://192.168.0.133:7777/software");
//     int httpCode = http.GET();

//     GFX::writeText("CHOOSE A SOFTWARE TO DOWNLOAD", 0 , 0);
//     if (httpCode == HTTP_CODE_OK) {
//         int len = http.getSize();
//         WiFiClient *client = http.getStreamPtr();

//         if (len > 0) {
//             String json = http.getString();
//             StaticJsonDocument<200> doc;
//             DeserializationError error = deserializeJson(doc, json);
//         }
//     } else {
//         Serial.printf("HTTP GET failed, code: %d\n", httpCode);
//     }
//     http.end();

//     http.begin("http://192.168.0.133:7777/beatles");
//     http.setTimeout(UINT16_MAX);
//     httpCode = http.GET();

//     payloadBuffer = (uint8_t *) malloc(25000 * 3);
//     int selectedFrame;

//     frameQueue = xQueueCreate(3, sizeof(uint8_t *)); // Queue can hold pointers to frames

//     // Create the frame decompression task on core 1
//     xTaskCreatePinnedToCore(
//         frameDecompressor,         // Task function
//         "FrameDecompressor",       // Task name
//         4096,                      // Stack size
//         NULL,                      // Parameter passed to the task
//         24,                         // Priority
//         &decompressTaskHandle,     // Task handle
//         0                          // Core 1
//     );
    
//     int frameC = 0;
//     if (httpCode == HTTP_CODE_OK) {
//         int len = http.getSize();
//         WiFiClient *client = http.getStreamPtr();
//         if (len > 0) {
//             // Load the first three frames into the payload buffer
//             while (ind < len && frameIndex < numFrames) {
//                 if (frameC < 1558) {
//                     int bytesToRead = sizeTable[frameC++];
//                     uint8_t *frameData = (uint8_t *)malloc(bytesToRead);
//                     client->readBytes(frameData, bytesToRead);
//                     xQueueSend(frameQueue, &frameData, portMAX_DELAY); // Send frame data to the queue
//                     ind += bytesToRead;
//                     frameIndex++;
//                 } else {
//                     break;
//                 }
//             }

//             // Reset frame index for display loop
//             frameIndex = 0;

//             timer = esp_timer_get_time();
//             // Display and overwrite frames in a loop
//             while (ind < len) {
//                 // Read the next frame into the buffer
//                 if (frameC < 1558) {
//                     int bytesToRead = sizeTable[frameC++];
//                     uint8_t *frameData = (uint8_t *)malloc(bytesToRead);
//                     client->readBytes(frameData, bytesToRead);
//                     unlockQueue = true;
//                     xQueueSend(frameQueue, &frameData, portMAX_DELAY); // Send new frame data
//                     ind += bytesToRead;
//                     actualFrame++;
//                 } else {
//                     break; // No more frames to read
//                 }
//             }
//         }
//     } else {
//         Serial.printf("HTTP GET failed, code: %d\n", httpCode);
//     }
//     GFX::updateScreen();
//     http.end();

//     Serial.print(esp_get_free_heap_size());
// }